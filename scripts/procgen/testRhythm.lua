
local dbg_enemy = require("scripts/chars/charDBG")

local music = love.audio.newSource("sound/music/inextricably-linked-edit.wav","stream")
local bpm = 80

local timesig = 4 -- how many beats in a bar. whether it's 4th or 8th or 5th notes doesn't matter, this is a calc against bpm
local offset = 0.0 -- time in seconds before the first beat should kick in

local pattern = {
	-- MAYBE TODO: give these patterns real key to refer to them? at least for demo purposes
	{	-- pattern[1], 		=	. , . , . , 1 , * , .
		key = "space", -- the key to press for this pattern's hit
		dir = "pressed",
		wait = 1.0, -- 1 beat of wait between prime and hit
		wait_buffer_early = 0.05, -- fraction of a beat of early buffer time
		wait_buffer_late = 0.05, -- fraction of a beat of late buffer time
		sound = {	-- Outside of debug, all the SFX AND Art are handled by stageRhythm and the character fighter files, not the ProcGen. Only here for debugging.
			prime = love.audio.newSource("sound/sfx/bouncy-ready-01.wav","static"),
			hold = nil,
			attack = nil,
			hit = love.audio.newSource("sound/sfx/hit-swords-parry-01.wav","static"),
			miss = love.audio.newSource("sound/sfx/miss-01.wav","static"),
		},
		anim = {
			player = {
				prime = nil,
				hold = nil,
				attack = nil,
				hit = nil,
				miss = nil,
			},
			enemy = {
				prime = dbg_enemy.anim.cut_prime,
				hold = dbg_enemy.anim.cut_hold,
				attack = nil,
				hit = dbg_enemy.anim.cut_hit,
				miss = dbg_enemy.anim.cut_miss,
			},
		},
	}, 	
	{	-- pattern[2], 		=	1 , . , . , . , * , .
		key = "space",
		dir = "released",
		wait = 4.0, -- 4 beats of wait
		wait_buffer_early = 0.2, 
		wait_buffer_late = 0.3, 
		sound = {
			prime = love.audio.newSource("sound/sfx/twinkle-01.wav","static"),
			hold = nil,
			attack = nil,
			hit = love.audio.newSource("sound/sfx/hit-swords-parry-01.wav","static"),
			miss = love.audio.newSource("sound/sfx/miss-01.wav","static"),
		},
		anim = {
			player = {
				prime = nil,
				hold = nil,
				attack = nil,
				hit = nil,
				miss = nil,
			},
			enemy = {
				prime = dbg_enemy.anim.cut_prime,
				hold = dbg_enemy.anim.cut_hold,
				attack = nil,
				hit = dbg_enemy.anim.cut_hit,
				miss = dbg_enemy.anim.cut_miss,
			},
		},
	},
	{	-- pattern[3], 		=	. , 3 , 2 , 1 , * , * , * , .
		key = "space",
		dir = "pressed",
		primes = 3, -- how many primes before the wait, default = 1
		countdown = 1.0, -- number of beats between each prime, default = 1.0. difficulty up if countdown =/= wait
		wait = 1.0,
		wait_buffer_early = 0.2,
		wait_buffer_late = 0.3,
		extra_hits = { 1.0, 1.0 }, -- default is an empty array of extra hits, here: two extra hits, each one beat later. Uses the same early/late buffers
		sound = {
			prime = love.audio.newSource("sound/sfx/bouncy-ready-02.wav","static"),
			hold = nil,
			attack = nil,
			hit = love.audio.newSource("sound/sfx/hit-swords-parry-01.wav","static"),
			miss = love.audio.newSource("sound/sfx/miss-01.wav","static"),
		},
		anim = {
			player = {
				prime = nil,
				hold = nil,
				attack = nil,
				hit = nil,
				miss = nil,
			},
			enemy = {
				prime = dbg_enemy.anim.cut_prime,
				hold = dbg_enemy.anim.cut_hold,
				attack = nil,
				hit = dbg_enemy.anim.cut_hit,
				miss = dbg_enemy.anim.cut_miss,
			},
		},
	}
}

local beats = {
	{}, -- 0:00. 4-bar fade-in loop begins
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- 0:12. 4-bar drums intro
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar, ends with drums tease		-- 1
	{}, 									-- and
	{}, 									-- 2
	{}, 									-- and
	{}, 									-- 3
	{}, 									-- and
	{ primes = { 1 } }, 					-- 4		Prime for pattern 1
	{}, 									-- and, equals one full bar (don't have hits in the first bar)
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar, ending with full drums transition into main section
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 0:24. 4-bar section introducting bleeps & bloops.
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 0:36. 4-bar, bleep & bloop loop continues
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 0:48. 4-bar, bleep & bloop loop continues continuing
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 1:00. 4-bar section intro to the slow string section
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 1:12. 4-bar, strings continue
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 1:24. 4-bar, strings cut out and droning takes over
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 1:36. 4-bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar, drums tease a transition but nothing happens
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 1:48. 4-bar, bleeps & bloops start up again.
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 2:00. 4-bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 2:12. 4-bar, strings ACTUALLY start again
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 2:24. 4-bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- 2:36. 4-bar outro of the bass drone. considering adding one extra trick here?
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{ primes = { 1 } },
	{ primes = { 1 } },
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- 2:48. 4-bar outro fading to silence
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
	{}, -- bar
	{},
	{},
	{},
	{},
	{},
	{},
	{},
} 


local M = { beats = beats, pattern = pattern, offset = offset, bpm = bpm, timesig = timesig, music = music }
return M